import { type NextPage } from "next";
import Head from "next/head";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "~/utils/api";
import { useState } from "react";
import type { inferProcedureOutput } from "@trpc/server";
import type { AppRouter } from "~/server/api/root";

type Todo = inferProcedureOutput<AppRouter["todoRouter"]["all"]>[number];

const Home: NextPage = () => {
    const { data: sessionData } = useSession();
    return (
        <>
            <Head>
                <title>Todo Time Tracker</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main>
                {sessionData && <Header />}
                {sessionData && <Main /> || <Login />}
            </main>
        </>
    );
};

const Login: React.FC = () => {
    return (
        <div>
            <div className="login container flex flex-col items-center justify-center gap-12">
                <h1 className="text-5xl font-extrabold tracking-tight sm:text-[5rem]">
                    Todo <span className="text-[#E98074]">Time</span> Tracker
                </h1>
                <button
                    className="rounded-full bg-[#8E8D8A] px-10 py-3 font-semibold text-white no-underline transition hover:bg-[#8E8D8A]/80"
                    onClick={() => void signIn()}
                >
                    Sign in
                </button>
            </div>
        </div>
    )
}

const Main: React.FC = () => {
    const [newTodoTitle, setNewTodoTitle] = useState<string>("");
    const allTodos = api.todoRouter.all.useQuery();
    const mutation = api.todoRouter.addTodo.useMutation();

    const completedTodos: Todo[] | undefined = allTodos.data?.filter(todo => todo.completed);
    const remainingTodos: Todo[] | undefined = allTodos.data?.filter(todo => !todo.completed);

    const handleNewTodoTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setNewTodoTitle(e.target.value);
    }

    const addTodo = () => {
        mutation.mutate({ title: newTodoTitle });
    }


    const completedTodosExist = completedTodos !== undefined

    return (
        <div className="container gap-12 text-3xl font-extrabold">
            <div className="flex pb-3">
                <input
                    type="text"
                    onChange={handleNewTodoTitleChange}
                    className="add-todo-input"
                />
                <button
                    className="add-todo-button"
                    onClick={addTodo}
                >
                    Add Todo
                </button>
            </div>
            <div>
                {remainingTodos?.map((todo: Todo) => {
                    return <TodoElement task={todo} key={todo.id} />
                })}
            </div>
            <div>
                {completedTodosExist || <h3>Completed</h3>}
                {completedTodos?.map((todo: Todo) => {
                    return <TodoElement task={todo} key={todo.id} />
                })}
            </div>
        </div>
    )
}


const TodoElement = (props: { task: Todo }) => {
    const onChangeHander = () => {
        console.log("onChange ", props.task.title)

    }
    const deleteTodo = () => {
        console.log("Time to delete");
    }
    return (
        <div className="todo">
            <input
                id={`check-box-${props.task.id}`}
                type="checkbox"
                value=""
                name="bordered-checkbox"
                className="todo-checkbox"
                onChange={onChangeHander}
            />
            <label
                className="w-full py-4 ml-2 text-sm font-medium">
                {props.task.title}
            </label>
            <div className="flex-grow"></div>
            <button
                className="text-[#E85A4F] rounded-full w-12 h-12 px-6 py-2 flex justify-center align-center"
                onClick={deleteTodo}
            >
                ...
            </button>
        </div>
    )
}

const Header: React.FC = () => {
    return (
        <div className="header">
            <div className="header-title">Todo Time Tracker</div>
            <div className="flex-grow" />
            <button
                className="header-button"
                onClick={() => void signOut()}
            >
                <span>sign out</span>
            </button>
        </div>
    )
}

export default Home;


